@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-search/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .

<http://semantic-machines.com/veda/veda-schema-Delegation>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология системы Veda"@ru ;
  rdfs:label "Veda system ontology"@en ;
#  owl:versionInfo "1.3" ;
  v-s:loadPriority 6 ;
.

# ------------------------------------------------------------ КЛАССЫ --

v-s:RequestDelegation
  rdf:type owl:Class ;
  rdfs:label "Заявка на делегирование"@ru ;
  rdfs:label "Request delegation"@en ;
  rdfs:subClassOf v-s:HRRecord ;
  rdfs:subClassOf v-s:OrganizationUnit ;
  rdfs:subClassOf v-s:Temporal ;
  v-ui:hasTemplate v-s:RequestDelegationTemplate ;
.
v-s:delegator
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Доверитель"@ru ;
  rdfs:label "Delegator"@en ;
  rdfs:range v-s:Person ;
.
v-s:delegate
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Заместитель"@ru ;
  rdfs:label "Delegate"@en ;
  rdfs:range v-s:Person ;
.
v-s:delegatedPosition
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Делегируемая должность"@ru ;
  rdfs:label "Delegated position"@en ;
  rdfs:range v-s:Position ;
.
v-s:createdAppointment
  rdf:type owl:ObjectProperty ;
  rdfs:domain v-s:RequestDelegation ;
  rdfs:label "Созданное назначение"@ru ;
  rdfs:label "Created appointment"@en ;
  rdfs:range v-s:Appointment ;
.
v-s:RequestDelegationUser
  rdf:type owl:Class ;
  rdfs:label "Заявка на делегирование для пользователя"@ru ;
  rdfs:label "Request delegation for user"@en ;
  rdfs:subClassOf v-s:RequestDelegation ;
  v-ui:hasTemplate v-s:RequestDelegationTemplate ;
.
v-s:RequestDelegationAdmin
  rdf:type owl:Class ;
  rdfs:label "Заявка на делегирование для администратора"@ru ;
  rdfs:label "Request delegation for admin"@en ;
  rdfs:subClassOf v-s:RequestDelegation ;
  v-ui:hasTemplate v-s:RequestDelegationTemplate ;
.

# ------------------------------------------------------------ СПЕЦИФИКАЦИИ --

v-s:PsDelegateForRequestDelegation
  rdf:type v-ui:PropertySpecification ;
  v-ui:forClass v-s:RequestDelegation ;
  v-ui:forProperty v-s:delegate ;
  v-ui:minCardinality 1 ;
  v-ui:maxCardinality 1 ;
  v-ui:queryPrefix "'rdf:type' === 'v-s:Appointment' || 'rdf:type' === 'v-s:Person'" ;
.
v-s:PsDelegatorForRequestDelegation
  rdf:type v-ui:PropertySpecification ;
  v-ui:forClass v-s:RequestDelegation ;
  v-ui:forProperty v-s:delegator ;
  v-ui:minCardinality 0 ;
  v-ui:maxCardinality 1 ;
  v-ui:queryPrefix "'rdf:type' === 'v-s:Appointment' || 'rdf:type' === 'v-s:Person' || ( 'rdf:type' === 'v-s:Person' && 'v-s:deleted' == true )" ;
.
v-s:PsDelegatedPositionForRequestDelegation
  rdf:type v-ui:PropertySpecification ;
  v-ui:forClass v-s:RequestDelegation ;
  v-ui:forProperty v-s:delegatedPosition ;
  v-ui:minCardinality 1 ;
  v-ui:maxCardinality 10 ;
  v-ui:queryPrefix "'rdf:type' === 'v-s:Position' || ( 'rdf:type' === 'v-s:Position' && 'v-s:deleted' == true )" ;
.
v-s:PsDatesRequestDelegation
  rdf:type v-ui:PropertySpecification ;
  v-ui:forClass v-s:RequestDelegation ;
  v-ui:forProperty v-s:dateFrom, v-s:dateTo ;
  v-ui:minCardinality 1 ;
  v-ui:maxCardinality 1 ;
.

# ------------------------------------------------------------ ШАБЛОНЫ --

v-s:RequestDelegationTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:RequestDelegation ;
  v-ui:forClass v-s:RequestDelegationUser ;
  v-ui:forClass v-s:RequestDelegationAdmin ;
  rdfs:label "Шаблон для класса v-s:RequestDelegationUser"@ru ;
  rdfs:label "Template for v-s:RequestDelegationUser class"@en ;
  v-ui:template """
<script>
  if ( individual.hasValue("rdf:type", new veda.IndividualModel("v-s:RequestDelegationAdmin")) ) {
    $("#delegator-control", template).removeClass("-edit").addClass("edit");
    $("#delegator-value", template).removeClass("edit").addClass("-edit");
    $("#position-control", template).removeClass("-edit").addClass("edit");
  } else {
    $("#custom-label", template).remove();
  }
  //# sourceURL=v-s:RequestDelegationTemplate_pre
</script>
<div class="container sheet">
  <h2 about="v-s:RequestDelegation" property="rdfs:label"></h2>
  <hr>
  <div class="row">
    <div class="col-md-6 col-xs-12">
      <em about="v-s:delegator" property="rdfs:label"></em>
      <div about="@" id="delegator-value" rel="v-s:delegator" data-template="v-ui:LabelTemplate" class="view edit -search"></div>
      <div rel="v-s:delegator" data-template="v-ui:LabelTemplate" class="-view -edit search"></div>
      <veda-control id="delegator-control" data-type="link" rel="v-s:delegator" class="-view -edit search fulltext"></veda-control>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6 col-xs-12">
      <em about="v-s:delegatedPosition" property="rdfs:label"></em>
      <div rel="v-s:delegatedPosition" data-template="v-ui:LabelTemplate" class="view edit search"></div>
      <veda-control id="position-control" data-type="link" rel="v-s:delegatedPosition" class="-view -edit search fulltext"></veda-control>
      <div id="positions" class="-view edit -search">
        <div class="checkbox">
          <label>
            <input class="input" type="checkbox" value="">
            <span class="position-label"></span>
          </label>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6 col-xs-12">
      <em about="v-s:delegate" property="rdfs:label"></em>
      <div rel="v-s:delegate" data-template="v-ui:LabelTemplate" class="view -edit search"></div>
      <veda-control data-type="link" rel="v-s:delegate" class="-view edit search fulltext"></veda-control>
    </div>
  </div>
  <div class="row" id="custom-label">
    <div class="col-md-6 col-xs-12">
      <em about="rdfs:label" property="rdfs:label"></em>
      <div property="rdfs:label" class="view -edit -search"></div>
      <veda-control data-type="multilingualString" property="rdfs:label" class="-view edit search"></veda-control>
    </div>
  </div>
  <div class="row">
    <div class="col-md-3 col-xs-6">
      <em about="v-s:dateFrom" property="rdfs:label"></em>
      <div property="v-s:dateFrom" class="view -edit search"></div>
      <veda-control property="v-s:dateFrom" data-type="dateTime" class="-view edit search"></veda-control>
    </div>
    <div class="col-md-3 col-xs-6">
      <em about="v-s:dateTo" property="rdfs:label"></em>
      <div property="v-s:dateTo" class="view -edit search"></div>
      <veda-control property="v-s:dateTo" data-type="dateTime" class="-view edit search"></veda-control>
    </div>
  </div>
  <br>
  <div class="view -edit -search">
    <em about="v-s:createdAppointment" property="rdfs:label"></em>
    <ul about="@" rel="v-s:createdAppointment">
      <li><a href="#/@" property="rdfs:label"></a></li>
    </ul>
  </div>
  <br>
  <div class="actions view edit -search">
    <span about="@" data-template="v-ui:StandardButtonsTemplate" data-embedded="true" data-buttons="edit save cancel delete"></span>
  </div>
</div>
<script>
  individual.on("v-s:delegatedPosition", delegatedPositionHandler);
  individual.on("v-s:delegator v-s:delegate", delegatorDelegateHandler);
  individual.on("v-s:delegator", delegatorHandler);
  template.one("remove", function () {
    individual.off("v-s:delegatedPosition", delegatedPositionHandler);
    individual.off("v-s:delegator v-s:delegate", delegatorDelegateHandler);
    individual.off("v-s:delegator", delegatorHandler);
  });
  delegatedPositionHandler(individual["v-s:delegatedPosition"]);

  var positionTemplate = $("#positions", template).html();
  $("#positions", template)
    .empty()
    .on("click", "input", function (e) {
      var id = $(this).prop("id");
      var position = new veda.IndividualModel(id);
      if ( $(this).is(":checked") ) {
        individual["v-s:delegatedPosition"] = individual["v-s:delegatedPosition"].concat(position);
      } else {
        individual["v-s:delegatedPosition"] = individual["v-s:delegatedPosition"].filter(function (item) {
          return item.id !== position.id;
        });
      }
    });

  function delegatedPositionHandler(values) {
    if (values.length) {
      $("#positions", template).removeClass("has-error");
    } else {
      $("#positions", template).addClass("has-error");
    }
  }
  function delegatorDelegateHandler(property_uri, values) {
    if (values.length && values[0]["rdf:type"][0].id === "v-s:Appointment") {
      individual[property_uri] = values[0]["v-s:employee"];
    }
  }
  function delegatorHandler(values) {
    $("#positions", template).empty();
    if (values.length) {
      var delegator = individual["v-s:delegator"][0];
      //var appointments_ids = query(veda.ticket, "('rdf:type' === 'v-s:Appointment' && 'v-s:employee' == '" + delegator.id + "') || ('rdf:type' === 'v-s:Appointment' && 'v-s:employee' == '" + delegator.id + "' && 'v-s:deleted' == true)").result;
      var appointments_ids = query(veda.ticket, "('rdf:type' === 'v-s:Appointment' && 'v-s:employee' == '" + delegator.id + "')").result;
      var appointments = get_individuals(veda.ticket, appointments_ids);
      var positions_ids = appointments.map(function (appointment_json) {
        var appointment = new veda.IndividualModel(appointment_json);
        return appointment["v-s:occupation"][0].id;
      });
      var positions = get_individuals(veda.ticket, positions_ids);
      positions.map(function (position_json) {
        var position = new veda.IndividualModel(position_json);
        var tmpl = $(positionTemplate);
        var input = tmpl.find(".input");
        var label = tmpl.find(".position-label");
        if ( individual.hasValue("v-s:delegatedPosition", position) ) {
          input.prop("checked", "checked");
        }
        input.prop( "id", position.id );
        if (mode === "view") {
          input.prop("disabled", "disabled");
        }
        label.text( position["rdfs:label"] );
        tmpl.appendTo( $("#positions", template) );
      });
    }
  }

  //if ( mode === "search") { return }
  if ( mode === "edit" && individual.is("v-s:RequestDelegationUser") && individual.isNew() ) {
    individual["v-s:delegator"] = [veda.user];
  }

  template.on("view edit", function (e) {
    if (e.type === "view") {
      $("#positions", template).find(".input").prop("disabled", "disabled");
    } else {
      $("#positions", template).find(".input").prop("disabled", false);
    }
  });
  //# sourceURL=v-s:RequestDelegationTemplate_post
</script>
""" ;
.

# ------------- РЕЕСТРЫ ---------------

# ------------- Delegation registry templates ---------------

v-s:RequestDelegationRegistryResultTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон результатов реестра заявки на делегирование"@ru ;
  rdfs:label "Request delegation registry result template"@en ;
  v-ui:template """
<table class="table table-bordered">
  <thead class="result-header">
    <tr>
      <th colspan="9" about="v-s:RequestDelegation" property="rdfs:label"></th>
    </tr>
    <tr class="active">
      <th width="1%">#</th>
      <th width="1%"><span class="glyphicon glyphicon-search"></span></th>
      <th class="orderby" data-orderby="v-s:delegator"><span about="v-s:delegator" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:delegate"><span about="v-s:delegate" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:delegatedPosition"><span about="v-s:delegatedPosition" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:dateFrom"><span about="v-s:dateFrom" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:dateTo"><span about="v-s:dateTo" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:creator"><span about="v-s:creator" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:created"><span about="v-s:created" property="rdfs:label"></span></th>
    </tr>
  </thead>
  <tbody class="result-container">
    <tr>
      <td class="serial-number"></td>
      <td><a href="#/@" class="glyphicon glyphicon-search"></a></td>
      <td rel="v-s:delegator" data-template="v-ui:LabelTemplate"></td>
      <td rel="v-s:delegate" data-template="v-ui:LabelTemplate"></td>
      <td rel="v-s:delegatedPosition" data-template="v-ui:LabelTemplate"></td>
      <td property="v-s:dateFrom"></td>
      <td property="v-s:dateTo"></td>
      <td rel="v-s:creator" data-template="v-ui:LabelTemplate"></td>
      <td property="v-s:created"></td>
    </tr>
  </tbody>
</table>
  """ ;
.

# ------------- Individuals ---------------

v-s:CreateRequestDelegationUser
  a v-fc:Blank ;
  rdfs:label "Заявка на делегирование"@ru ;
  rdfs:label "Delegation request"@en ;
  v-fc:targetType v-s:RequestDelegationUser ;
.

v-s:CreateRequestDelegationAdmin
  a v-fc:Blank ;
  rdfs:label "Заявка на делегирование для администратора"@ru ;
  rdfs:label "Delegation request for admin"@en ;
  v-fc:targetType v-s:RequestDelegationAdmin ;
.

v-s:RequestDelegationRegistry
  a v-fs:AttributiveSearch;
  rdfs:label "Заявки на делегирование"@ru;
  rdfs:label "Delegation requests"@en;
  v-fs:searchBlank v-s:RequestDelegationRegistryBlank ;
  v-fs:searchBlankTemplate v-s:RequestDelegationTemplate ;
  v-fs:searchResultTemplate v-s:RequestDelegationRegistryResultTemplate ;
.

v-s:RequestDelegationRegistryBlank
  rdf:type v-fc:Blank ;
  rdfs:label "Заявки на делегирование"@ru ;
  rdfs:label "Delegation requests"@en ;
  v-fc:targetType v-s:RequestDelegation ;
  v-fc:targetType v-s:RequestDelegationUser ;
  v-fc:targetType v-s:RequestDelegationAdmin ;
.

# ------------------------------------------------------------ УПРАВЛЕНИЕ ПРАВАМИ --

v-s:RequestDelegation_BaseUser
  rdf:type v-s:Group ;
  rdfs:label "Основные пользователи RequestDelegation"@ru ;
  rdfs:label "Users RequestDelegation"@en ;
.

v-s:RequestDelegation_Admin
  rdf:type v-s:Group ;
  rdfs:label "Администраторы RequestDelegation"@ru ;
  rdfs:label "Administrators RequestDelegation"@en ;
.

v-s:RequestDelegation_permission1
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegation ;
  v-s:permissionObject v-s:RequestDelegation_group ;
  v-s:permissionObject v-s:CreateRequestDelegationUser ;
  v-s:permissionObject v-s:RequestDelegationRegistry ;
  v-s:permissionObject v-s:RequestDelegationRegistryBlank ;
  v-s:permissionSubject v-s:RequestDelegation_BaseUser ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "R. Все пользователи. Индивиды v-s:RequestDelegation" ;
.

v-s:RequestDelegation_permission2
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegationUser ;
  v-s:permissionSubject v-s:RequestDelegation_BaseUser ;
  v-s:canCreate "true"^^xsd:boolean ;
  rdfs:label "C. Админы. Класс RequestDelegation" ;
.

v-s:RequestDelegation_permission3
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-s:RequestDelegation ;
  v-s:permissionObject v-s:RequestDelegation_group ;
  v-s:permissionObject v-s:CreateRequestDelegationUser ;
  v-s:permissionObject v-s:RequestDelegationRegistry ;
  v-s:permissionObject v-s:RequestDelegationRegistryBlank ;
  v-s:permissionObject v-s:CreateRequestDelegationAdmin ;
  v-s:permissionObject v-s:RequestDelegationAdmin ;
  v-s:permissionObject v-s:RequestDelegationAdmin_group ;
  v-s:permissionSubject v-s:RequestDelegation_Admin ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  rdfs:label "CRUD. Админы. Индивиды v-s:RequestDelegation" ;
.

v-s:AllUsersGroup_RequestDelegation_BaseUser_membership
  rdf:type v-s:Membership ;
  v-s:memberOf v-s:RequestDelegation_BaseUser ;
  v-s:resource cfg:AllUsersGroup ;
  v-s:resource v-s:RequestDelegation_Admin ;
  rdfs:label "Все пользователи входят в группу Основные пользователи RequestDelegation" ;
.

# ------------------------------------------------------------ СЕРВЕРНЫЕ СКРИПТЫ --

cfg:Event_Delegation
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обработки запросов на делегирование" ;
  v-s:triggerByType v-s:RequestDelegation ;
  v-s:script """
// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

var request_uri = document["@"],
    request_type = veda.Util.getUri(document["rdf:type"]),
    dateFrom = document["v-s:dateFrom"],
    dateTo = document["v-s:dateTo"],
    now = new Date(),
    isActual = dateFrom[0].data <= now && now <= dateTo[0].data,
    delegator_uri = veda.Util.getUri(document["v-s:delegator"]) || "",
    delegate_uri = veda.Util.getUri(document["v-s:delegate"]),
    position_uris = veda.Util.getUris(document["v-s:delegatedPosition"]),
    request_deleted = veda.Util.hasValue(document, "v-s:deleted", {data: true, type: "Boolean"}),
    delegate,
    custom_label = document["rdfs:label"];

//print("[cfg:Event_Delegation] ************************** START **************************");
//print("[cfg:Event_Delegation]", "delegator =", delegator_uri, "| delegate =", delegate_uri, "| from =", dateFrom[0].data.toISOString(), "| to =", dateTo[0].data.toISOString(), "| positions =", JSON.stringify(position_uris), "| isActual =", isActual);

if (request_type === "v-s:RequestDelegationUser" && delegator_uri !== user_uri && !request_deleted) {
  //print("[cfg:Event_Delegation] ACCESS VIOLATION: delegator_uri !== user_uri");
  //print("[cfg:Event_Delegation] ************************** END **************************");
  return;
}

var allDelegated = get_individual(ticket, "cfg:AllDelegatedAppointments");
if (!allDelegated) {
  allDelegated = {
    "@": "cfg:AllDelegatedAppointments",
    "rdf:type": veda.Util.newUri("rdfs:Resource"),
    "rdfs:label": veda.Util.newStr("All delegated appointments (cfg:Event_Delegation)")
  };
}
allDelegated["rdf:value"] = allDelegated["rdf:value"] || [];

position_uris.map(function (position_uri) {
  var uri = "d:" + Sha256.hash( ["delegated", delegator_uri, delegate_uri, position_uri].join("_").split(":").join("_") ).substring(40);
  var appointment = get_individual(ticket, uri);

  // Compute label
  var appointment_label;
  if ( !custom_label ) {
    try {
      var delegate = get_individual(ticket, delegate_uri);
      var position = get_individual(ticket, position_uri);
      var delegate_labels = delegate["rdfs:label"];
      var position_labels = position["rdfs:label"];
      //print('delegate_labels:', JSON.stringify(delegate_labels), 'position_labels:', JSON.stringify(position_labels));
      appointment_label = delegate_labels.map(function (item) {
        var lang = item.lang;
        var pos_label = position_labels.map( function (label) {
          return label.lang === lang ? label.data : undefined;
        }).filter( function (val) {
          return val !== undefined;
        });
        item.data = item.data + " : " + pos_label.join(", ") + " (*)";
        return item;
      });
    } catch (error) {
      //print(error);
      appointment_label = veda.Util.newStr(uri);
    }
  }

  if ( !appointment ) {
    appointment = {
      "@": uri,
      "rdf:type": veda.Util.newUri("v-s:Appointment"),
      "rdfs:label": custom_label || appointment_label,
      "v-s:employee": veda.Util.newUri(delegate_uri),
      "v-s:occupation": veda.Util.newUri(position_uri),
      "v-s:dateFrom": dateFrom,
      "v-s:dateTo": dateTo,
      "v-s:official": veda.Util.newBool(true),
      "v-s:origin": veda.Util.newStr(request_type === "v-s:RequestDelegationUser" ? "user" : "admin"),
      "v-s:deleted": veda.Util.newBool(!isActual),
      "rdfs:comment": veda.Util.newStr("создано cfg:Event_Delegation")
    };
    //print("[cfg:Event_Delegation] new appointment created", uri);
  } else {
    // Update dates
    appointment["v-s:dateFrom"] = dateFrom;
    appointment["v-s:dateTo"] = dateTo;
    appointment["v-s:deleted"] = veda.Util.newBool(!isActual);
    //print("[cfg:Event_Delegation] appointment dates updated", uri, "| isActual =", isActual);
  }

  allDelegated["rdf:value"] = allDelegated["rdf:value"].filter(function (item) {
    return item.data !== uri;
  });

  if ( request_deleted ) {
    appointment["v-s:deleted"] = veda.Util.newBool(true);
    delegate = get_individual(ticket, delegate_uri);
    delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"] || [];
    delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"].filter( function (item) {
      return item.data !== uri;
    });
    delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"] || [];
    delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"].filter( function (item) {
      return item.data !== uri;
    });
    //print("[cfg:Event_Delegation] request delegation deleted => delete appointment, update delegate");
    put_individual(ticket, delegate, _event_id);
  } else {
    allDelegated["rdf:value"].push({ data: uri, type: "Uri" });
  }

  //print("[cfg:Event_Delegation] appointment =", JSON.stringify(appointment));
  put_individual(ticket, appointment, _event_id);

  document["v-s:createdAppointment"] = document["v-s:createdAppointment"] || [];
    document["v-s:createdAppointment"] = document["v-s:createdAppointment"].filter( function (item) {
    return item.data !== uri;
  });
  document["v-s:createdAppointment"].push( veda.Util.newUri(uri) );
});

// Update request
put_individual(ticket, document, _event_id);

// Update AllDelegatedAppointments for further processing
put_individual(ticket, allDelegated, _event_id);
//print("[cfg:Event_Delegation] ************************** END **************************");
  """ ;
.

cfg:Event_ProcessAllDelegated
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обработки запросов на делегирование" ;
  v-s:triggerByUid cfg:daily ;
  v-s:script """
// Process allDelegated list
var now = new Date(), allDelegated = get_individual(ticket, "cfg:AllDelegatedAppointments");
if (!allDelegated) {
  allDelegated = {
    "@": "cfg:AllDelegatedAppointments",
    "rdf:type": veda.Util.newUri("rdfs:Resource"),
    "rdfs:label": veda.Util.newStr("All delegated appointments (cfg:Event_Delegation)")
  };
}
allDelegated["rdf:value"] = allDelegated["rdf:value"] || [];

allDelegated["rdf:value"] = allDelegated["rdf:value"].filter(function (item) {
  var appointment_uri = item.data;
  var appointment = get_individual(ticket, appointment_uri);

  var isPremature = now < appointment["v-s:dateFrom"][0].data;
  var isActual = appointment["v-s:dateFrom"][0].data <= now && now <= appointment["v-s:dateTo"][0].data;
  var isOverdue = now > appointment["v-s:dateTo"][0].data;
  var isDeleted = veda.Util.hasValue(appointment, "v-s:deleted", {data: true, type: "Boolean"});

  //print("[cfg:Event_Delegation]", "appointment =", appointment_uri, "| isPremature =", isPremature, "| isActual =", isActual, "| isOverdue =", isOverdue, "| isDeleted =", isDeleted );

  if ( isActual ) {

    if ( isDeleted ) {
      appointment["v-s:deleted"] = [];
      put_individual(ticket, appointment, _event_id);
      //print("[cfg:Event_Delegation] appointment became actual & restored", appointment_uri);
      delegate_uri = veda.Util.getUri( appointment["v-s:employee"] );
      delegate = get_individual(ticket, delegate_uri);
      delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"] || [];
      delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"].filter( function (item) {
        return item.data !== appointment_uri;
      }).concat({data: appointment_uri, type: "Uri"});
      put_individual(ticket, delegate, _event_id);
      //print("[cfg:Event_Delegation] delegate updated - actual appointment added", delegate_uri);
    }
    // Keep actual appointment in list
    return true;

  } else if ( isOverdue ) {

    if ( !isDeleted ) {
      delegate_uri = veda.Util.getUri( appointment["v-s:employee"] );
      delegate = get_individual(ticket, delegate_uri);
      delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"] || [];
      delegate["v-s:hasAppointment"] = delegate["v-s:hasAppointment"].filter( function (item) {
        return item.data !== appointment_uri;
      });
      delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"] || [];
      delegate["v-s:defaultAppointment"] = delegate["v-s:defaultAppointment"].filter( function (item) {
        return item.data !== appointment_uri;
      });
      appointment["v-s:deleted"] = veda.Util.newBool(true);
      put_individual(ticket, appointment, _event_id);
      //print("[cfg:Event_Delegation] overdue appointment deleted", appointment_uri);
      put_individual(ticket, delegate, _event_id);
      //print("[cfg:Event_Delegation] delegate updated - overdue appointment removed", delegate_uri);
    }
    // Remove overdue appointment from list
    return false;

  } else if (isPremature) {
    if ( !isDeleted ) {
      // Mark premature appointment as deleted
      appointment["v-s:deleted"] = veda.Util.newBool(true);
      put_individual(ticket, appointment, _event_id);
      //print("[cfg:Event_Delegation] premature appointment deleted", appointment_uri);
    }
    // Keep premature appointment in list
    return true;
  }

});

put_individual(ticket, allDelegated, _event_id);

var allDelegated_list = allDelegated["rdf:value"].map(function (item) { return item.data; });
//print("[cfg:Event_Delegation] Update cfg:AllDelegatedAppointments =", JSON.stringify(allDelegated_list));

//print("cfg:Event_Delegation ************************** END **************************");
  """ ;
.
