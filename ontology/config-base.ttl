@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-l: <http://semantic-machines.com/veda/veda-layout/> .
@prefix m-l: <http://semantic-machines.com/veda/mondi-layout/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .


@prefix cfgb: <http://semantic-machines.com/veda/config-base/> .
<http://semantic-machines.com/veda/config-base>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system administrator ontology"@en ;
  rdfs:label "Онтология администратора системы Веда"@ru ;
#  owl:versionInfo "1.0" ;
  v-s:loadPriority 2 ;
.

### -------------------------------------------------------
cfg:Guest
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:firstName "Guest"@en ;
  v-s:firstName "Гость"@ru ;
  v-s:hasAccount cfg:GuestAccount ;
  rdfs:label "Guest"@en ;
  rdfs:label "Гость"@ru ;
.
cfg:GuestAccount
  rdf:type v-s:Account ;
  rdfs:label "Guest account"@en ;
  v-s:password "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"^^xsd:string ;
  rdfs:label "Guest. Учетная запись"@ru ;
  rdfs:label "Guest. Account"@ru ;
.
cfg:GuestAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:Guest ;
  rdfs:label "Guest. Назначение"@ru ;
  rdfs:label "Guest. Appointment"@en ;
.

### -------------------------------------------------------
cfg:ImportDMSToVeda
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:firstName "Import DMS to Veda"@en ;
  v-s:firstName "Утилита импорта DMS to Veda"@ru ;
  v-s:hasAccount cfg:ImportDMSToVedaAccount ;
  rdfs:label "Import DMS to Veda"@en ;
  rdfs:label "Утилита DMS to Veda"@ru ;
.
cfg:ImportDMSToVedaAccount
  rdf:type v-s:Account ;
  rdfs:label "Import DMS to Veda account"@en ;
  v-s:owner cfg:ImportDMSToVeda;
  v-s:password "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"^^xsd:string ;
  v-s:login "ImportDMSToVeda" ;
  rdfs:label "ImportDMSToVeda. Учетная запись"@ru ;
  rdfs:label "ImportDMSToVeda. Account"@en ;
.
cfg:ImportDMSToVedaAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:ImportDMSToVeda ;
  v-s:occupation cfg:User_position;
  v-s:official "false"^^xsd:boolean;
  rdfs:label "ImportDMSToVeda. Назначение"@ru ;
  rdfs:label "ImportDMSToVeda. Appointment"@en ;
.
### -------------------------------------------------------

cfg:VedaNTLMFilter
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:firstName "Veda NTLM Filter"@en ;
  v-s:firstName "Veda NTLM Фильтр"@ru ;
  v-s:hasAccount cfg:VedaNTLMFilterAccount ;
  rdfs:label "Veda NTLM Filter"@en ;
  rdfs:label "Veda NTLM Фильтр"@ru ;
.

cfg:VedaNTLMFilterAccount
  rdf:type v-s:Account ;
  rdfs:label "VedaNTLMFilter account"@en ;
  v-s:owner cfg:VedaNTLMFilter;
  v-s:password "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"^^xsd:string ;
  v-s:login "VedaNTLMFilter" ;
  rdfs:label "VedaNTLMFilter. Учетная запись"@ru ;
  rdfs:label "VedaNTLMFilter. Account"@en ;
.

cfg:VedaNTLMFilterAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:VedaNTLMFilter ;
  v-s:occupation cfg:User_position;
  v-s:official "false"^^xsd:boolean;
  rdfs:label "VedaNTLMFilter. Назначение"@ru ;
  rdfs:label "VedaNTLMFilter. Appointment"@en ;
.

### -------------------------------------------------------
cfg:VedaSystem
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:actualVersion cfg:VedaSystem ;
  v-s:birthday "2014-03-05"^^xsd:dateTime ;
  v-s:firstName "Veda"@en ;
  v-s:firstName "Веда"@ru ;
  v-s:hasAccount cfg:VedaSystemAccount ;
  v-s:lastName "System"@en ;
  v-s:lastName "Система"@ru ;
  rdfs:label "Veda System"@en ;
  rdfs:label "Система Веда"@ru ;
.
cfg:VedaSystemAccount
  rdf:type v-s:Account ;
  v-s:author cfg:VedaSystem ;
  v-s:login "veda" ;
  v-s:password "4d1af0e10dab5fe07ae8d23bad5650b46804fb110cfb92f119213bc86aa03d34" ;
  v-s:owner cfg:VedaSystem ;
  rdfs:label "VedaSystem. Account"@en ;
  rdfs:label "VedaSystem. Учетная запись"@ru ;
  v-s:mailbox "DocFlow.Syktyvkar@mondigroup.com" ;
.
cfg:VedaSystemAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:VedaSystem ;
  rdfs:label "Система Optiflow"@ru ;
  rdfs:label "System Optiflow"@en ;
.

### -------------------------------------------------------
cfg:Administrator
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:actualVersion cfg:Administrator ;
  v-s:birthday "2014-03-05"^^xsd:dateTime ;
  v-s:firstName "Administrator"@en ;
  v-s:firstName "Администратор"@ru ;
  v-s:hasAccount cfg:AdministratorAccount ;
  rdfs:label "Administrator"@en ;
  rdfs:label "Администратор"@ru ;
.
cfg:AdministratorAccount
  rdf:type v-s:Account ;
  v-s:author cfg:VedaSystem ;
  v-s:login "admin" ;
  v-s:password "4d1af0e10dab5fe07ae8d23bad5650b46804fb110cfb92f119213bc86aa03d34" ;
  v-s:owner cfg:Administrator ;
  rdfs:label "Administrator. Account"@en ;
  rdfs:label "Administrator. Учетная запись"@ru ;
.
cfg:AdministratorAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:Administrator ;
  rdfs:label "Administrator. Назначение"@ru ;
  rdfs:label "Administrator. Appointment"@en ;
.
### -------------------------------------------------------
cfg:User_position
  a v-s:Position;
  v-s:updateCounter "1"^^xsd:integer;
  v-s:origin "manual"^^xsd:string;
  rdfs:label "Пользователь"@ru;
  rdfs:label "User"@en;
.

### -------------------------------------------------------

cfg:Permission_ntlmu_r_tau
  rdf:type v-s:PermissionStatement ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:permissionObject cfg:VedaNTLMFilter ;
  v-s:permissionSubject cfg:TrustedAuthenticationUserGroup ;
.

cfg:Permission_VedaSystem_allRead
  rdf:type v-s:PermissionStatement ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:permissionObject cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
.

td:pm_pa_au
  rdf:type v-s:PermissionStatement ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:permissionObject v-s:PersonalAspect, v-ui:Preferences, v-s:File, v-s:Version;
  v-s:permissionSubject cfg:AllUsersGroup ;
.

### -------------------------------------------------------

cfg:SuperUser
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Super admin"@en ;
  rdfs:label "Супер админ"@ru ;
.

cfg:TrustedAuthenticationUserGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Trusted Authentication User"@en ;
  rdfs:label "Trusted Authentication Пользователи"@ru ;
.

cfg:TTLResourcesGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "TTL resources group"@en ;
  rdfs:label "Группа всех ресурсов из TTL"@ru ;
.

cfg:AllUsersGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "All users group"@en ;
  rdfs:label "Группа всех пользователей"@ru ;
.

cfg:OntologyGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Group for Ontology individuals"@en ;
  rdfs:label "Группа для индивидов онтологии"@ru ;
.

### -------------------------------------------------------
cfg:Membership_su
  rdf:type v-s:Membership ;
  v-s:author cfg:VedaSystem ;
  v-s:resource cfg:VedaSystem ;
  v-s:resource cfg:Administrator ;
  v-s:resource cfg:ImportDMSToVeda ;
  v-s:memberOf cfg:SuperUser ;
.

cfg:Membership_tau
  rdf:type v-s:Membership ;
  v-s:author cfg:VedaSystem ;
  v-s:resource cfg:VedaNTLMFilter ;
  v-s:memberOf cfg:TrustedAuthenticationUserGroup ;
.

### -------------------------------------------------------
cfg:Permission_su
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:SuperUser ;
  v-s:permissionObject v-s:AllResourcesGroup ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
.

cfg:Permission_2
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:TTLResourcesGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permissions to read TTL resources for all users"@en ;
  rdfs:label "Право на чтение всех ресурсов из TTL для всех пользователей"@ru ;
.

cfg:Permission_3
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:OntologyGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read ontology individuals for all users"@en ;
  rdfs:label "Разрешение на чтение онтологии для всех пользователей"@ru ;
.

cfg:Permission_4
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject v-s:OrganizationUnit_group ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read org. structure individuals for all users"@en ;
  rdfs:label "Разрешение на чтение орг. структуры для всех пользователей"@ru ;
.

cfg:Permission_5
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject v-s:Journal_group ;
  v-s:permissionObject v-s:JournalRecord_group ;
  v-s:permissionObject v-wf:Decision_group ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read journals for all users"@en ;
  rdfs:label "Разрешение на чтение журналов для всех пользователей"@ru ;
.

cfg:Permission_6
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject v-s:Dictionary_group ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read dictionaries for all users"@en ;
  rdfs:label "Разрешение на чтение справочников для всех пользователей"@ru ;
.
#cfg:Permission_7
#  rdf:type v-s:PermissionStatement ;
#  v-s:author cfg:VedaSystem ;
#  v-s:permissionSubject cfg:AllUsersGroup ;
#  v-s:permissionObject v-s:Group_group ;
#  v-s:canRead "true"^^xsd:boolean ;
#  rdfs:label "Permission to read groups for all users "@en ;
#  rdfs:label "Разрешение на чтение групп для всех пользователей"@ru ;
#  v-s:deleted "true"^^xsd:boolean ;
#.

cfg:Membership_AllUsersGroup_WorkFlowReadUser
  rdf:type v-s:Membership ;
  v-s:author cfg:VedaSystem ;
  v-s:memberOf v-wf:WorkflowReadUser ;
  v-s:resource cfg:AllUsersGroup ;
  rdfs:label "All users group is member of v-wf:WorkflowReadUser" ;
.

##################### EVENT HANDLERS #####################

cfg:Event_0
  rdf:type v-s:Event1 ;
  v-s:runAt "V8.LowPriority" ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "test event";
  rdfs:comment "test event";
  v-s:script """
var res = query (ticket, "'rdf:type' == 'v-s:Event'");
log_trace("res=", res);
  """ ;
.

cfg:Event_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup" ;
  rdfs:comment "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup" ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */
var doc_uri = document['@'],
  isDefinedBy = document['rdfs:isDefinedBy'],
  isGroup = getUri(document['rdf:type']) === "v-s:Group";
if ( !isDefinedBy || isGroup) return;
var uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + 'cfg_TTLResourcesGroup',
  membership = {
    '@' : uri,
    'rdf:type'     : newUri('v-s:Membership'),
    'v-s:memberOf' : newUri('cfg:TTLResourcesGroup'),
    'v-s:resource' : newUri(doc_uri),
    'rdfs:comment' : newStr('создано автоматически в обработчике cfg:Event_1')
  };
put_individual(ticket, membership, _event_id);
//log_trace(uri);

  """ ;
.

cfg:Event_2
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  rdfs:comment "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

/*var doc_uri = document['@'],
  is_new = !prev_state,
  is_ontology = !!document['rdfs:isDefinedBy'];

if (is_new && !is_ontology) {
  document["v-s:author"] = newUri(user_uri);
  document["v-s:owner"] = newUri(user_uri);
  put_individual(ticket, document, _event_id);
  addRight(ticket, [can_read, can_update, can_delete], user_uri, doc_uri);
  //print("Event 2: uri", doc_uri, getUri(document['rdf:type']), "prev", toJson(prev_state) );
}
*/

var doc_uri = document['@'],
    owner_properties = ["v-s:owner", "v-s:author", "v-s:publisher", "v-s:creator"];

owner_properties.map(function (property_uri) {
  var owner_uri = getUri( document[property_uri] );
  if (owner_uri && owner_uri !== "cfg:VedaSystem") {
    var owner = get_individual(ticket, owner_uri);
    if (owner) {
      var owner_type = getUri(owner["rdf:type"]);
      if (owner_type === "v-s:Person" || owner_type === "v-s:Position") {
        var new_right_uri = doc_uri + "_" + owner_uri;
        addRight(ticket, [can_read, can_update, can_delete], owner_uri, doc_uri, new_right_uri);
      } else if (owner_type === "v-s:Appointment") {
        var position_uri = getUri(owner["v-s:occupation"]);
        if (position_uri) {
          var new_right_uri = doc_uri + "_" + position_uri;
          addRight(ticket, [can_read, can_update, can_delete], position_uri, doc_uri, new_right_uri);
        }
        var person_uri = getUri(owner["v-s:employee"]);
        if (person_uri) {
          var new_right_uri = doc_uri + "_" + person_uri;
          addRight(ticket, [can_read, can_update, can_delete], person_uri, doc_uri, new_right_uri);
        }
      }
    }
  }
});
  """ ;
.

cfg:Event_3
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт создает журнал документа" ;
  rdfs:comment "Скрипт создает журнал документа" ;
  v-s:triggerByType v-s:Journaling, v-s:AutomaticallyVersioned ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (user_uri == 'cfg:VedaSystem') return; // #245

if (super_classes.indexOf('v-s:AutomaticallyVersioned')>=0)
{
  create_version(ticket, document, prev_state, user_uri, _event_id);
}

if (super_classes.indexOf('v-s:Journaling')>=0)
{
  var publisher_uri = getUri(document['v-s:creator']);
  if (!publisher_uri) { return; }

  var publisher = get_individual(ticket, publisher_uri);
  if (!publisher) { return; }

  var employee_uri;
  if ( hasValue(publisher, "rdf:type", {data: "v-s:Appointment", type: _Uri}) )
  {
    employee_uri = publisher['v-s:employee'];
    if (!employee_uri) { return; }
  }
  else
  {
    employee_uri = publisher_uri;
  }

  if (!employee_uri) { return; }

  var journal_uri = getJournalUri(document['@']);
  var exist_journal = get_individual(ticket, journal_uri);

  var user = get_individual(ticket, user_uri);

  var actor_uri = hasValue(user, 'v-s:defaultAppointment') ? getUri(user['v-s:defaultAppointment']) :
                  hasValue(user, 'v-s:hasAppointment') ? getUri(user['v-s:hasAppointment']) :
                  user_uri;

  var actor = newUri(actor_uri);

  if (exist_journal)
  {
    // UPDATE DOCUMENT
    var journal_record = newJournalRecord(journal_uri);
    if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@'])
    {
      journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
    }
    if ((!prev_state['v-s:deleted'] || prev_state['v-s:deleted'].data == 'false') &&
        (document['v-s:deleted'] && document['v-s:deleted'].data == 'true'))
    {
      journal_record['rdf:type'] = [
      {
        data: 'v-s:DocumentDeleted',
        type: _Uri
      }];
    }
    else
    {
      journal_record['rdf:type'] = [
      {
        data: 'v-s:DocumentUpdated',
        type: _Uri
      }];
    }
    journal_record['v-s:actor'] = actor;
    logToJournal(ticket, journal_uri, journal_record);
    addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_record['@']);
  }
  else
  {
    // CREATE DOCUMENT
    var new_journal = {
      '@': journal_uri,
      'rdf:type': [
      {
        data: 'v-s:Journal',
        type: _Uri
      }],
      'v-s:onDocument': [
      {
        data: document['@'],
        type: _Uri
      }],
      'v-s:actor': actor
    };
    put_individual(ticket, new_journal, _event_id);

    addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_uri);

    var journal_record = newJournalRecord(new_journal['@']);
    if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@'])
    {
      journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
    }
    journal_record['rdf:type'] = [
    {
      data: 'v-s:DocumentCreated',
      type: _Uri
    }];
    journal_record['v-s:actor'] = actor;
    logToJournal(ticket, journal_uri, journal_record);
    addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_record['@']);
  }
}
  """ ;
.

cfg:Event_4
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает единицу орг. структуры в группу родительской единицы. Включает персону в группу должности." ;
  rdfs:comment "Скрипт включает единицу орг. структуры в группу родительской единицы. Включает персону в группу должности." ;
  v-s:triggerByType v-s:Organization ;
  v-s:triggerByType v-s:Department ;
  v-s:triggerByType v-s:Position ;
  v-s:triggerByType v-s:Appointment ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document['@'],
  deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean });

if ( hasValue(document, "v-s:parentUnit") ) {
  var parents = getUris( document["v-s:parentUnit"] );
  parents.map(function (parent_uri) {
    var uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + parent_uri.split(":").join("_"),
        membership;
    membership = get_individual(ticket, uri);
    if (!membership) {
      membership = {
        '@' : uri,
        'rdf:type'     : newUri("v-s:Membership"),
        'v-s:resource' : newUri(doc_uri),
        'v-s:memberOf' : newUri(parent_uri),
        'rdfs:comment' : newStr("выдан cfg:Event_4")
      };
      put_individual (ticket, membership, _event_id);
    }
  });
}

if ( hasValue(document, "rdf:type", { data: "v-s:Appointment", type: _Uri }) ) {
  var person_uri = getUri(document['v-s:employee']),
      position_uri = getUri(document['v-s:occupation']);

  if (!person_uri || !position_uri) return;

  var uri = 'd:membership_' + person_uri.split(':').join('_') + '_' + position_uri.split(':').join('_'),
      membership;
  membership = get_individual(ticket, uri);
  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(position_uri),
      'v-s:resource' : newUri(person_uri),
      'rdfs:comment' : newStr('создано автоматически в обработчике cfg:Event_4'),
      'v-s:deleted'  : newBool(deleted)
    };
    put_individual (ticket, membership, _event_id);
    return;
  }
  var membership_deleted = hasValue(membership, "v-s:deleted", { data: true, type: _Boolean });
  if (deleted !== membership_deleted) {
    membership["v-s:deleted"] = newBool(deleted);
    put_individual (ticket, membership, _event_id);
  }
}
  """ ;
.

cfg:Event_5
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает персону (кроме cfg:Guest) в группу cfg:AllUsersGroup." ;
  rdfs:comment "Скрипт включает персону (кроме cfg:Guest) в группу cfg:AllUsersGroup." ;
  v-s:triggerByType v-s:Person ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document["@"],
    deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean}),
    uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + "cfg_AllUsersGroup",
    membership;

if (doc_uri === "cfg:Guest") { return; }

// Manage accounts (delete or restore)
var accounts_uris = getUris(document["v-s:hasAccount"]);
accounts_uris.map(function (account_uri) {
  var account = get_individual(ticket, account_uri);
  if (account) {
    var account_deleted = hasValue(account, "v-s:deleted", { data: true, type: _Boolean});
    if (deleted !== account_deleted) {
      account["v-s:deleted"] = newBool( deleted );
      put_individual (ticket, account, _event_id);
    }
  }
});

// Manage membership (delete or restore)
membership = get_individual(ticket, uri);

if (!membership) {
  membership = {
    "@" : uri,
    "rdf:type"     : newUri("v-s:Membership"),
    "v-s:resource" : newUri(doc_uri),
    "v-s:memberOf" : newUri("cfg:AllUsersGroup"),
    "rdfs:comment" : newStr("выдан cfg:Event_5"),
    "v-s:deleted"  : newBool( deleted )
  };
  put_individual (ticket, membership, _event_id);
  return;
}

var membership_deleted = hasValue(membership, "v-s:deleted", { data: true, type: _Boolean});
if (deleted !== membership_deleted) {
  membership["v-s:deleted"] = newBool( deleted );
  put_individual (ticket, membership, _event_id);
}
  """ ;
.

cfg:Event_6
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает индивид онтологии и UI настроек в группу cfg:OntologyGroup." ;
  rdfs:comment "Скрипт включает индивид онтологии и UI настроек в группу cfg:OntologyGroup." ;
  v-s:triggerByType rdf:Property ;
  v-s:triggerByType rdfs:Class ;
  v-s:triggerByType rdfs:Datatype ;
  v-s:triggerByType owl:Class ;
  v-s:triggerByType owl:Ontology ;
  v-s:triggerByType owl:DatatypeProperty ;
  v-s:triggerByType owl:ObjectProperty ;
  v-s:triggerByType owl:Restriction ;
  v-s:triggerByType v-ui:ClassModel ;
  v-s:triggerByType v-ui:ClassTemplate ;
  v-s:triggerByType v-ui:PropertySpecification ;
  v-s:triggerByType v-ui:DatatypePropertySpecification ;
  v-s:triggerByType v-ui:ObjectPropertySpecification ;
  v-s:triggerByType v-s:Bundle ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

// Update ontology vsn
var vsn = {
  "@" : "cfg:OntoVsn",
  "rdf:type"  : newUri("rdfs:Resource"),
  "rdf:value" : newStr( guid() )
};
put_individual (ticket, vsn, _event_id);

// Add to cfg:OntologyGroup
var doc_uri = document['@'],
    uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + "cfg_OntologyGroup",
    membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri('cfg:OntologyGroup'),
  'v-s:resource' : newUri(doc_uri),
  'rdfs:comment' : newStr('выдан cfg:Event_6')
};
put_individual (ticket, membership, _event_id);
  """ ;
.

cfg:Event_7
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает индивид в группу индивидов своего класса." ;
  rdfs:comment "Скрипт включает индивид в группу индивидов своего класса." ;
  v-s:triggerByType v-s:ClassAuthorized ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (parent_document_id && parent_document_id === document['@']) return;

var doc_uri = document["@"],
  _classes = getUris( document["rdf:type"] ),
  doc_deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean});

_classes.map(function (class_uri) {
  var class_group_uri = class_uri + '_group', // uri группы индивидов класса
    uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + class_group_uri.split(':').join('_'),
    membership = get_individual(ticket, uri);

  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(class_group_uri),
      'v-s:resource' : newUri(doc_uri),
      'rdfs:comment' : newStr('создано cfg:Event_7')
    };
  }
  put_individual (ticket, membership, _event_id);
});
  """ ;
.

cfg:Event_8
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает группу индивидов класса в группу индивидов суперкласса. Включает класс в группу суперкласса." ;
  rdfs:comment "Скрипт включает группу индивидов класса в группу индивидов суперкласса. Включает класс в группу суперкласса." ;
  v-s:triggerByType rdfs:Class ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (parent_document_id && parent_document_id === document['@']) return;

var _class = document,
  class_uri = _class["@"],
  class_group_uri = class_uri + "_group",
  class_deleted = hasValue(_class, "v-s:deleted", { data: true, type: _Boolean } ),
  class_group = get_individual(ticket, class_group_uri);

if ( !class_group ) {
  var class_group = {
    '@' : class_group_uri,
    'rdf:type'     : newUri('v-s:Group'),
    'rdfs:label' : newStr("Группа индивидов класса " + class_uri),
    'rdfs:comment' : newStr('создано cfg:Event_8')
  };
  put_individual (ticket, class_group, _event_id);
  //print("cfg:Event_8 class group", class_group_uri);
}

if ( !hasValue(_class, "rdfs:subClassOf") ) { return; }

var _super_classes = getUris( _class["rdfs:subClassOf"] );

_super_classes.map(function (super_uri) {
  if ( super_uri === "owl:Thing" || class_uri === "rdfs:Resource" ) {
    return;
  }

  // class memberOf superclass
  var uri = 'd:membership_' + class_uri.split(':').join('_') + '_' + super_uri.split(':').join('_'),
    membership = get_individual(ticket, uri);
  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(super_uri),
      'v-s:resource' : newUri(class_uri),
      'rdfs:comment' : newStr('1. создано cfg:Event_8')
    }
    put_individual (ticket, membership, _event_id);
    //print('cfg:Event_8 membership (class -> superclass)', uri);
  }

  // class_group memberOf superclass_group
  var super_group_uri = super_uri + "_group",
    uri = 'd:membership_' + class_group_uri.split(':').join('_') + '_' + super_group_uri.split(':').join('_'),
    membership = get_individual(ticket, uri);

  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(super_group_uri),
      'v-s:resource' : newUri(class_group_uri),
      'rdfs:comment' : newStr('2. создано cfg:Event_8')
    };
    put_individual (ticket, membership, _event_id);
  }
  //print('cfg:Event_8 membership', uri);
});
  """ ;
.

cfg:Event_9
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает вложенные индивиды в группу своего родителя." ;
  rdfs:comment "Скрипт включает вложенные индивиды в группу своего родителя." ;
  v-s:triggerByType v-s:Embedded ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document["@"],
  parent_uri = getUri( document["v-s:parent"] ),
  doc_deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean});

//print('cfg:Event_9', 'start', 'parent_uri', parent_uri );

if (!parent_uri) { return; }

var uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + parent_uri.split(':').join('_'),
  membership = get_individual(ticket, uri);

if (!membership) {
  membership = {
    '@' : uri,
    'rdf:type'     : newUri('v-s:Membership'),
    'v-s:memberOf' : newUri(parent_uri),
    'v-s:resource' : newUri(doc_uri),
    'rdfs:comment' : newStr('создано cfg:Event_9')
  };
  put_individual (ticket, membership, _event_id);
}
//print('cfg:Event_9', uri);

// Delete embedded tree
if (doc_deleted) {
  Object.keys(document).map(function (property_uri) {
    if (property_uri === "@") { return }
    document[property_uri].map(function (value) {
      if (value.type !== _Uri) { return }
      var embedded = get_individual(ticket, value.data);
      if (embedded && hasValue(embedded, "v-s:parent", {data: doc_uri, type: _Uri}) && !hasValue(embedded, "v-s:deleted", {data: true, type: _Boolean}) ) {
        embedded["v-s:deleted"] = newBool(true);
        put_individual (ticket, embedded, _event_id);
        //print("embedded deleted:", embedded["@"]);
      }
    });
  });
}
  """ ;
.

cfg:Event_10
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает журнал и записи журнала в группу документа с ограниченим прав до R." ;
  rdfs:comment "Скрипт включает журнал и записи журнала в группу документа с ограниченим прав до R." ;
  v-s:triggerByType v-s:Journal ;
  v-s:triggerByType v-s:JournalRecord ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if ( document['v-wf:isTrace'] || getUri(document['rdf:type']) === 'v-wf:TraceRecord' ) { return; }

var this_uri = document['@'],
  group_uri = getUri(document["v-s:onDocument"]) || getUri(document["v-s:parentJournal"]) || getUri(document["v-wf:onProcess"]);

if (!group_uri) { return; }

var uri = 'd:membership_' + this_uri.split(':').join('_') + '_' + group_uri.split(':').join('_');

var membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri(group_uri),
  'v-s:resource' : newUri(this_uri),
  'rdfs:comment' : newStr('создано cfg:Event_10'),
  'v-s:canRead'  : newBool(true)
};

put_individual (ticket, membership, _event_id);

//print('cfg:Event_10 journal membership', uri);

  """ ;
.

cfg:Event_11
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает задания в группу запущенного процесса с ограниченим прав до R." ;
  rdfs:comment "Скрипт включает задания в группу запущенного процесса с ограниченим прав до R." ;
  v-s:triggerByType v-wf:Process ;
  v-s:triggerByType v-wf:WorkItem ;
  v-s:triggerByType v-wf:WorkOrder ;
  v-s:triggerByType v-wf:DecisionForm ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var this_uri = document['@'],
  group_uri = getUri(document["v-wf:forProcess"]) || getUri(document["v-wf:forWorkItem"]) || getUri(document["v-wf:onWorkOrder"]) || getUri(document["v-wf:parentWorkOrder"]);

if (!group_uri) { return; }

var uri = 'd:membership_' + this_uri.split(':').join('_') + '_' + group_uri.split(':').join('_');

var membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri(group_uri),
  'v-s:resource' : newUri(this_uri),
  'rdfs:comment' : newStr('создано cfg:Event_11'),
  'v-s:canRead'  : newBool(true)
};

put_individual (ticket, membership, _event_id);

//print('cfg:Event_11 process membership', uri);

  """ ;
.

cfg:Event_12
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает процесс в группу журнала документа." ;
  rdfs:comment "Скрипт включает процесс в группу журнала документа." ;
  v-s:triggerByType v-s:ProcessStarted ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var process_uri = getUri(document['v-wf:onProcess']),
  doc_journal_uri = getUri(document['v-s:onDocument']) + "j";

var uri = 'd:membership_' + process_uri.split(':').join('_') + '_' + doc_journal_uri.split(':').join('_');

var membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri(doc_journal_uri),
  'v-s:resource' : newUri(process_uri),
  'rdfs:comment' : newStr('создано cfg:Event_12'),
  'v-s:canRead'  : newBool(true)
};

put_individual (ticket, membership, _event_id);

//print('cfg:Event_12 process membership', uri);

  """ ;
.

cfg:Event_13
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Manually create version" ;
  rdfs:comment "Manually create version" ;
  v-s:triggerByType v-s:ManuallyVersioned ;
  v-s:script """
  if ((document['v-s:triggerVersionCreation'] && document['v-s:triggerVersionCreation'][0]
    && document['v-s:triggerVersionCreation'][0].data == true) || !prev_state) {
    delete document['v-s:triggerVersionCreation'];
  create_version(ticket, document, prev_state, user_uri, _event_id);
  }

  """ ;
.

cfg:Event_14
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Пусто." ;
  rdfs:comment "Пусто." ;
  v-s:triggerByType v-s:Versioned ;
  v-s:disabled true ;
  v-s:script """
  """ ;
.

cfg:Event_15
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обработки связей документов" ;
  rdfs:comment "Скрипт обработки связей документов" ;
  v-s:triggerByType v-s:Link ;
  v-s:script """
  var linkUri = document["@"],
      linkToUri = getUri(document["v-s:to"]),
      linkFromUri = getUri(document["v-s:from"]),
      linkTo = get_individual(ticket, linkToUri),
      linkFrom = get_individual(ticket, linkFromUri),
      containsThisLink,
      membershipUri = "d:link_membership_" + linkUri.split(":").join("_") + "_" + linkToUri.split(":").join("_") + "_" + linkFromUri.split(":").join("_"),
      membership = {
        '@' : membershipUri,
        'rdf:type'     : newUri('v-s:Membership'),
        'v-s:memberOf' : [ newUri(linkToUri), newUri(linkFromUri) ],
        'v-s:resource' : newUri(linkUri),
        'rdfs:comment' : newStr('создано cfg:Event_15'),
        'v-s:canRead'  : newBool(true)
      };
  if (linkTo) {
    linkTo["v-s:hasLink"] = linkTo["v-s:hasLink"] || [];
    containsThisLink = !!linkTo["v-s:hasLink"].filter(function (item) {
      return (item.data === linkUri);
    }).length;
    if (!containsThisLink) {
      linkTo["v-s:hasLink"].push({type: _Uri, data: linkUri});
      put_individual(ticket, linkTo, _event_id);
    }
  }
  if (linkFrom) {
    linkFrom["v-s:hasLink"] = linkFrom["v-s:hasLink"] || [];
    containsThisLink = !!linkFrom["v-s:hasLink"].filter(function (item) {
      return (item.data === linkUri);
    }).length;
    if (!containsThisLink) {
      linkFrom["v-s:hasLink"].push({type: _Uri, data: linkUri});
      put_individual(ticket, linkFrom, _event_id);
    }
  }
  if (linkTo && linkFrom) {
    put_individual(ticket, membership, _event_id);
    print("EVENT 15", JSON.stringify(membership, null, 2));
  }
  """ ;
.

cfg:Event_16
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обработки обратных ссылок" ;
  rdfs:comment "Скрипт обработки обратных ссылок" ;
  v-s:triggerByType v-s:BackwardLink ;
  v-s:script """
  var backwardLinkUri = document["@"],
      backwardPropertyUri = getUri(document["v-s:backwardProperty"]),
      backwardTargetUri = getUri(document["v-s:backwardTarget"]),
      omitGroup = getFirstValue(document["v-s:omitBackwardTargetGroup"]),
      isDeleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean }),
      backwardTarget = get_individual(ticket, backwardTargetUri),
      backwardTarget_original = JSON.stringify(backwardTarget);
  if (!backwardTarget || (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data !== backwardLinkUri) ) {
    return;
  }

  if (!omitGroup) {
    var membershipUri = 'd:backward_membership_' + backwardLinkUri.split(':').join('_') + '_' + backwardTargetUri.split(':').join('_'),
        membership = get_individual(ticket, membershipUri);
    if (!membership) {
      membership = {
        '@' : membershipUri,
        'rdf:type'     : newUri('v-s:Membership'),
        'v-s:memberOf' : newUri(backwardTargetUri),
        'v-s:resource' : newUri(backwardLinkUri),
        'rdfs:comment' : newStr('создано cfg:Event_16'),
        'v-s:canRead'  : newBool(true),
      };
    }
    if (isDeleted) {
      membership['v-s:deleted'] = newBool(true);
    }
    put_individual(ticket, membership, _event_id);
  }

  if (isDeleted) {
    for (var property_uri in backwardTarget) {
      if (property_uri === "@") { continue; }
      backwardTarget[property_uri] = backwardTarget[property_uri].filter(function (item) {
        return (item.data !== backwardLinkUri);
      });
    }
  } else if (backwardPropertyUri) {
    backwardTarget[backwardPropertyUri] = backwardTarget[backwardPropertyUri] || [];
    backwardTarget[backwardPropertyUri] = backwardTarget[backwardPropertyUri].filter(function (item) {
      return (item.data !== backwardLinkUri);
    });
    backwardTarget[backwardPropertyUri].push({type: _Uri, data: backwardLinkUri});
  }
  if (JSON.stringify(backwardTarget).length !== backwardTarget_original.length) {
    put_individual(ticket, backwardTarget, _event_id);
  }
  """ ;
.

cfg:Event_Hourly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт запускается раз в час" ;
  v-s:triggerByUid cfg:hourly ;
  v-s:script """
print("[cfg:Event_Hourly_1] ************************** START **************************");
print("[cfg:Event_Hourly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Daily_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт запускается раз в день" ;
  v-s:triggerByUid cfg:daily ;
  v-s:script """
print("[cfg:Event_Daily_1] ************************** START **************************");
print("[cfg:Event_Daily_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Weekly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт запускается раз в неделю" ;
  v-s:triggerByUid cfg:weekly ;
  v-s:script """
print("[cfg:Event_Weekly_1] ************************** START **************************");
print("[cfg:Event_Weekly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Monthly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт запускается раз в месяц" ;
  v-s:triggerByUid cfg:monthly ;
  v-s:script """
print("[cfg:Event_Monthly_1] ************************** START **************************");
print("[cfg:Event_Monthly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Yearly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт запускается раз в год" ;
  v-s:triggerByUid cfg:yearly ;
  v-s:script """
print("[cfg:Event_Yearly_1] ************************** START **************************");
print("[cfg:Event_Yearly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Notify_Task
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт уведомления о новой задаче" ;
  v-s:triggerByType v-wf:UserTaskForm ;
  v-s:script """
var task_id = document["@"],
    to = getUri(document["v-wf:to"]);
//print("cfg:Event_17", "caught", "task", task_id, "to", to);
  """ ;
.
cfg:Event_Notify_Comment
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт уведомления о новом комментарии" ;
  v-s:triggerByType v-s:Comment ;
  v-s:script """
var comment_id = document["@"],
    comment_target = getUri(document["v-s:backwardTarget"]),
    stakeholder = getUri(comment_target["v-s:author"]);
//print("cfg:Event_18", "caught", "comment", comment_id, "target", comment_target);
  """ ;
.
